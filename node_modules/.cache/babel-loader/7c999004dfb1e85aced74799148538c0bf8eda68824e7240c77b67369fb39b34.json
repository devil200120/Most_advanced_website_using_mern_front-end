{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT0001\\\\Desktop\\\\exam_site\\\\front-end\\\\src\\\\context\\\\ExamContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// File: c:\\Users\\KIIT0001\\Desktop\\exam_site\\frontend\\src\\context\\ExamContext.js\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { toast } from 'react-toastify';\nimport api from '../services/api';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  exams: [],\n  currentExam: null,\n  currentSubmission: null,\n  questions: [],\n  submissions: [],\n  isLoading: false,\n  error: null,\n  filters: {\n    subject: '',\n    grade: '',\n    difficulty: '',\n    search: ''\n  },\n  pagination: {\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0\n  }\n};\n\n// Action types\nconst ActionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  SET_EXAMS: 'SET_EXAMS',\n  SET_CURRENT_EXAM: 'SET_CURRENT_EXAM',\n  SET_CURRENT_SUBMISSION: 'SET_CURRENT_SUBMISSION',\n  SET_QUESTIONS: 'SET_QUESTIONS',\n  SET_SUBMISSIONS: 'SET_SUBMISSIONS',\n  ADD_EXAM: 'ADD_EXAM',\n  UPDATE_EXAM: 'UPDATE_EXAM',\n  DELETE_EXAM: 'DELETE_EXAM',\n  SET_FILTERS: 'SET_FILTERS',\n  SET_PAGINATION: 'SET_PAGINATION',\n  RESET_STATE: 'RESET_STATE'\n};\n\n// Reducer\nconst examReducer = (state, action) => {\n  var _state$currentExam, _state$currentExam2;\n  switch (action.type) {\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case ActionTypes.SET_EXAMS:\n      return {\n        ...state,\n        exams: action.payload.exams,\n        pagination: {\n          ...state.pagination,\n          ...action.payload.pagination\n        },\n        isLoading: false\n      };\n    case ActionTypes.SET_CURRENT_EXAM:\n      return {\n        ...state,\n        currentExam: action.payload\n      };\n    case ActionTypes.SET_CURRENT_SUBMISSION:\n      return {\n        ...state,\n        currentSubmission: action.payload\n      };\n    case ActionTypes.SET_QUESTIONS:\n      return {\n        ...state,\n        questions: action.payload\n      };\n    case ActionTypes.SET_SUBMISSIONS:\n      return {\n        ...state,\n        submissions: action.payload\n      };\n    case ActionTypes.ADD_EXAM:\n      return {\n        ...state,\n        exams: [action.payload, ...state.exams]\n      };\n    case ActionTypes.UPDATE_EXAM:\n      return {\n        ...state,\n        exams: state.exams.map(exam => exam._id === action.payload._id ? action.payload : exam),\n        currentExam: ((_state$currentExam = state.currentExam) === null || _state$currentExam === void 0 ? void 0 : _state$currentExam._id) === action.payload._id ? action.payload : state.currentExam\n      };\n    case ActionTypes.DELETE_EXAM:\n      return {\n        ...state,\n        exams: state.exams.filter(exam => exam._id !== action.payload),\n        currentExam: ((_state$currentExam2 = state.currentExam) === null || _state$currentExam2 === void 0 ? void 0 : _state$currentExam2._id) === action.payload ? null : state.currentExam\n      };\n    case ActionTypes.SET_FILTERS:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          ...action.payload\n        }\n      };\n    case ActionTypes.SET_PAGINATION:\n      return {\n        ...state,\n        pagination: {\n          ...state.pagination,\n          ...action.payload\n        }\n      };\n    case ActionTypes.RESET_STATE:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst ExamContext = /*#__PURE__*/createContext();\n\n// Exam provider component\nexport const ExamProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(examReducer, initialState);\n\n  // Fetch exams\n  const fetchExams = async (params = {}) => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      console.log('=== EXAM CONTEXT FETCH DEBUG ===');\n      console.log('Fetch params:', params);\n      const response = await api.get('/exams', {\n        params\n      });\n      console.log('ExamContext API response:', response.data);\n      if (response.data.success) {\n        const exams = response.data.data.exams || [];\n        console.log('Setting exams in context:', exams.length);\n        dispatch({\n          type: ActionTypes.SET_EXAMS,\n          payload: exams\n        });\n        dispatch({\n          type: ActionTypes.SET_PAGINATION,\n          payload: {\n            currentPage: response.data.data.currentPage || 1,\n            totalPages: response.data.data.totalPages || 1,\n            total: response.data.data.total || 0\n          }\n        });\n      } else {\n        throw new Error(response.data.message || 'Failed to fetch exams');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Fetch exams error:', error);\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch exams'\n      });\n    } finally {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: false\n      });\n    }\n  };\n\n  // Fetch exam by ID\n  const fetchExamById = async examId => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      const response = await apiCall('GET', endpoints.exams.getById(examId));\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.SET_CURRENT_EXAM,\n          payload: response.data.exam\n        });\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n        return response.data.exam;\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch exam'\n      });\n      return null;\n    }\n  };\n\n  // Create exam\n  const createExam = async examData => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      const response = await apiCall('POST', endpoints.exams.create, examData);\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.ADD_EXAM,\n          payload: response.data.exam\n        });\n        toast.success('Exam created successfully!');\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n        return {\n          success: true,\n          exam: response.data.exam\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create exam';\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Update exam\n  const updateExam = async (examId, examData) => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      const response = await apiCall('PUT', endpoints.exams.update(examId), examData);\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.UPDATE_EXAM,\n          payload: response.data.exam\n        });\n        toast.success('Exam updated successfully!');\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n        return {\n          success: true,\n          exam: response.data.exam\n        };\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update exam';\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Delete exam\n  const deleteExam = async examId => {\n    try {\n      const response = await apiCall('DELETE', endpoints.exams.delete(examId));\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.DELETE_EXAM,\n          payload: examId\n        });\n        toast.success('Exam deleted successfully!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete exam';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Start exam\n  const startExam = async examId => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      const response = await apiCall('POST', endpoints.submissions.start, {\n        examId\n      });\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.SET_CURRENT_SUBMISSION,\n          payload: response.data.submission\n        });\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n        toast.success('Exam started successfully!');\n        return {\n          success: true,\n          submission: response.data.submission\n        };\n      }\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const errorMessage = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to start exam';\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Submit answer\n  const submitAnswer = async (submissionId, questionId, answer, timeTaken) => {\n    try {\n      const response = await apiCall('POST', endpoints.submissions.submitAnswer, {\n        submissionId,\n        questionId,\n        answer,\n        timeTaken\n      });\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.SET_CURRENT_SUBMISSION,\n          payload: response.data.submission\n        });\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      const errorMessage = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to submit answer';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Submit exam\n  const submitExam = async submissionId => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      const response = await apiCall('POST', endpoints.submissions.submit, {\n        submissionId\n      });\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.SET_CURRENT_SUBMISSION,\n          payload: response.data.submission\n        });\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n        toast.success('Exam submitted successfully!');\n        return {\n          success: true,\n          submission: response.data.submission\n        };\n      }\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      const errorMessage = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to submit exam';\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Fetch submissions\n  const fetchSubmissions = async (params = {}) => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      const response = await apiCall('GET', endpoints.submissions.getAll, null, {\n        params\n      });\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.SET_SUBMISSIONS,\n          payload: response.data.submissions\n        });\n        dispatch({\n          type: ActionTypes.SET_LOADING,\n          payload: false\n        });\n      }\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to fetch submissions'\n      });\n    }\n  };\n\n  // Publish exam\n  const publishExam = async examId => {\n    try {\n      const response = await apiCall('PUT', endpoints.exams.publish(examId));\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.UPDATE_EXAM,\n          payload: response.data.exam\n        });\n        toast.success('Exam published successfully!');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      const errorMessage = ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Failed to publish exam';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Set filters\n  const setFilters = filters => {\n    dispatch({\n      type: ActionTypes.SET_FILTERS,\n      payload: filters\n    });\n  };\n\n  // Set pagination\n  const setPagination = pagination => {\n    dispatch({\n      type: ActionTypes.SET_PAGINATION,\n      payload: pagination\n    });\n  };\n\n  // Clear error\n  const clearError = () => {\n    dispatch({\n      type: ActionTypes.CLEAR_ERROR\n    });\n  };\n\n  // Reset state\n  const resetState = () => {\n    dispatch({\n      type: ActionTypes.RESET_STATE\n    });\n  };\n  const value = {\n    ...state,\n    fetchExams,\n    fetchExamById,\n    createExam,\n    updateExam,\n    deleteExam,\n    startExam,\n    submitAnswer,\n    submitExam,\n    fetchSubmissions,\n    publishExam,\n    setFilters,\n    setPagination,\n    clearError,\n    resetState\n  };\n  return /*#__PURE__*/_jsxDEV(ExamContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use exam context\n_s(ExamProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ExamProvider;\nexport const useExam = () => {\n  _s2();\n  const context = useContext(ExamContext);\n  if (!context) {\n    throw new Error('useExam must be used within an ExamProvider');\n  }\n  return context;\n};\n_s2(useExam, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ExamContext;\nvar _c;\n$RefreshReg$(_c, \"ExamProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","toast","api","jsxDEV","_jsxDEV","initialState","exams","currentExam","currentSubmission","questions","submissions","isLoading","error","filters","subject","grade","difficulty","search","pagination","page","limit","total","totalPages","ActionTypes","SET_LOADING","SET_ERROR","CLEAR_ERROR","SET_EXAMS","SET_CURRENT_EXAM","SET_CURRENT_SUBMISSION","SET_QUESTIONS","SET_SUBMISSIONS","ADD_EXAM","UPDATE_EXAM","DELETE_EXAM","SET_FILTERS","SET_PAGINATION","RESET_STATE","examReducer","state","action","_state$currentExam","_state$currentExam2","type","payload","map","exam","_id","filter","ExamContext","ExamProvider","children","_s","dispatch","fetchExams","params","console","log","response","get","data","success","length","currentPage","Error","message","_error$response","_error$response$data","fetchExamById","examId","apiCall","endpoints","getById","_error$response2","_error$response2$data","createExam","examData","create","_error$response3","_error$response3$data","errorMessage","updateExam","update","_error$response4","_error$response4$data","deleteExam","delete","_error$response5","_error$response5$data","startExam","start","submission","_error$response6","_error$response6$data","submitAnswer","submissionId","questionId","answer","timeTaken","_error$response7","_error$response7$data","submitExam","submit","_error$response8","_error$response8$data","fetchSubmissions","getAll","_error$response9","_error$response9$data","publishExam","publish","_error$response0","_error$response0$data","setFilters","setPagination","clearError","resetState","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useExam","_s2","context","$RefreshReg$"],"sources":["C:/Users/KIIT0001/Desktop/exam_site/front-end/src/context/ExamContext.js"],"sourcesContent":["// File: c:\\Users\\KIIT0001\\Desktop\\exam_site\\frontend\\src\\context\\ExamContext.js\r\nimport React, { createContext, useContext, useReducer } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport api from '../services/api';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  exams: [],\r\n  currentExam: null,\r\n  currentSubmission: null,\r\n  questions: [],\r\n  submissions: [],\r\n  isLoading: false,\r\n  error: null,\r\n  filters: {\r\n    subject: '',\r\n    grade: '',\r\n    difficulty: '',\r\n    search: ''\r\n  },\r\n  pagination: {\r\n    page: 1,\r\n    limit: 10,\r\n    total: 0,\r\n    totalPages: 0\r\n  }\r\n};\r\n\r\n// Action types\r\nconst ActionTypes = {\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_ERROR: 'SET_ERROR',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  SET_EXAMS: 'SET_EXAMS',\r\n  SET_CURRENT_EXAM: 'SET_CURRENT_EXAM',\r\n  SET_CURRENT_SUBMISSION: 'SET_CURRENT_SUBMISSION',\r\n  SET_QUESTIONS: 'SET_QUESTIONS',\r\n  SET_SUBMISSIONS: 'SET_SUBMISSIONS',\r\n  ADD_EXAM: 'ADD_EXAM',\r\n  UPDATE_EXAM: 'UPDATE_EXAM',\r\n  DELETE_EXAM: 'DELETE_EXAM',\r\n  SET_FILTERS: 'SET_FILTERS',\r\n  SET_PAGINATION: 'SET_PAGINATION',\r\n  RESET_STATE: 'RESET_STATE'\r\n};\r\n\r\n// Reducer\r\nconst examReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_LOADING:\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case ActionTypes.SET_ERROR:\r\n      return { ...state, error: action.payload, isLoading: false };\r\n    \r\n    case ActionTypes.CLEAR_ERROR:\r\n      return { ...state, error: null };\r\n    \r\n    case ActionTypes.SET_EXAMS:\r\n      return { \r\n        ...state, \r\n        exams: action.payload.exams,\r\n        pagination: { ...state.pagination, ...action.payload.pagination },\r\n        isLoading: false \r\n      };\r\n    \r\n    case ActionTypes.SET_CURRENT_EXAM:\r\n      return { ...state, currentExam: action.payload };\r\n    \r\n    case ActionTypes.SET_CURRENT_SUBMISSION:\r\n      return { ...state, currentSubmission: action.payload };\r\n    \r\n    case ActionTypes.SET_QUESTIONS:\r\n      return { ...state, questions: action.payload };\r\n    \r\n    case ActionTypes.SET_SUBMISSIONS:\r\n      return { ...state, submissions: action.payload };\r\n    \r\n    case ActionTypes.ADD_EXAM:\r\n      return { \r\n        ...state, \r\n        exams: [action.payload, ...state.exams] \r\n      };\r\n    \r\n    case ActionTypes.UPDATE_EXAM:\r\n      return {\r\n        ...state,\r\n        exams: state.exams.map(exam => \r\n          exam._id === action.payload._id ? action.payload : exam\r\n        ),\r\n        currentExam: state.currentExam?._id === action.payload._id ? action.payload : state.currentExam\r\n      };\r\n    \r\n    case ActionTypes.DELETE_EXAM:\r\n      return {\r\n        ...state,\r\n        exams: state.exams.filter(exam => exam._id !== action.payload),\r\n        currentExam: state.currentExam?._id === action.payload ? null : state.currentExam\r\n      };\r\n    \r\n    case ActionTypes.SET_FILTERS:\r\n      return { ...state, filters: { ...state.filters, ...action.payload } };\r\n    \r\n    case ActionTypes.SET_PAGINATION:\r\n      return { ...state, pagination: { ...state.pagination, ...action.payload } };\r\n    \r\n    case ActionTypes.RESET_STATE:\r\n      return initialState;\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst ExamContext = createContext();\r\n\r\n// Exam provider component\r\nexport const ExamProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(examReducer, initialState);\r\n\r\n  // Fetch exams\r\n  const fetchExams = async (params = {}) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      console.log('=== EXAM CONTEXT FETCH DEBUG ===');\r\n      console.log('Fetch params:', params);\r\n\r\n      const response = await api.get('/exams', { params });\r\n      console.log('ExamContext API response:', response.data);\r\n\r\n      if (response.data.success) {\r\n        const exams = response.data.data.exams || [];\r\n        console.log('Setting exams in context:', exams.length);\r\n        \r\n        dispatch({ \r\n          type: ActionTypes.SET_EXAMS, \r\n          payload: exams \r\n        });\r\n        \r\n        dispatch({ \r\n          type: ActionTypes.SET_PAGINATION, \r\n          payload: {\r\n            currentPage: response.data.data.currentPage || 1,\r\n            totalPages: response.data.data.totalPages || 1,\r\n            total: response.data.data.total || 0\r\n          }\r\n        });\r\n      } else {\r\n        throw new Error(response.data.message || 'Failed to fetch exams');\r\n      }\r\n    } catch (error) {\r\n      console.error('Fetch exams error:', error);\r\n      dispatch({\r\n        type: ActionTypes.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Failed to fetch exams'\r\n      });\r\n    } finally {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n    }\r\n  };\r\n\r\n  // Fetch exam by ID\r\n  const fetchExamById = async (examId) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      const response = await apiCall('GET', endpoints.exams.getById(examId));\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.SET_CURRENT_EXAM, payload: response.data.exam });\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n        return response.data.exam;\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: ActionTypes.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Failed to fetch exam'\r\n      });\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Create exam\r\n  const createExam = async (examData) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      const response = await apiCall('POST', endpoints.exams.create, examData);\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.ADD_EXAM, payload: response.data.exam });\r\n        toast.success('Exam created successfully!');\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n        return { success: true, exam: response.data.exam };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to create exam';\r\n      dispatch({ type: ActionTypes.SET_ERROR, payload: errorMessage });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Update exam\r\n  const updateExam = async (examId, examData) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      const response = await apiCall('PUT', endpoints.exams.update(examId), examData);\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.UPDATE_EXAM, payload: response.data.exam });\r\n        toast.success('Exam updated successfully!');\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n        return { success: true, exam: response.data.exam };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to update exam';\r\n      dispatch({ type: ActionTypes.SET_ERROR, payload: errorMessage });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Delete exam\r\n  const deleteExam = async (examId) => {\r\n    try {\r\n      const response = await apiCall('DELETE', endpoints.exams.delete(examId));\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.DELETE_EXAM, payload: examId });\r\n        toast.success('Exam deleted successfully!');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to delete exam';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Start exam\r\n  const startExam = async (examId) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      const response = await apiCall('POST', endpoints.submissions.start, { examId });\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.SET_CURRENT_SUBMISSION, payload: response.data.submission });\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n        toast.success('Exam started successfully!');\r\n        return { success: true, submission: response.data.submission };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to start exam';\r\n      dispatch({ type: ActionTypes.SET_ERROR, payload: errorMessage });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Submit answer\r\n  const submitAnswer = async (submissionId, questionId, answer, timeTaken) => {\r\n    try {\r\n      const response = await apiCall('POST', endpoints.submissions.submitAnswer, {\r\n        submissionId,\r\n        questionId,\r\n        answer,\r\n        timeTaken\r\n      });\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.SET_CURRENT_SUBMISSION, payload: response.data.submission });\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to submit answer';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Submit exam\r\n  const submitExam = async (submissionId) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      const response = await apiCall('POST', endpoints.submissions.submit, { submissionId });\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.SET_CURRENT_SUBMISSION, payload: response.data.submission });\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n        toast.success('Exam submitted successfully!');\r\n        return { success: true, submission: response.data.submission };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to submit exam';\r\n      dispatch({ type: ActionTypes.SET_ERROR, payload: errorMessage });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Fetch submissions\r\n  const fetchSubmissions = async (params = {}) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      const response = await apiCall('GET', endpoints.submissions.getAll, null, { params });\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.SET_SUBMISSIONS, payload: response.data.submissions });\r\n        dispatch({ type: ActionTypes.SET_LOADING, payload: false });\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: ActionTypes.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Failed to fetch submissions'\r\n      });\r\n    }\r\n  };\r\n\r\n  // Publish exam\r\n  const publishExam = async (examId) => {\r\n    try {\r\n      const response = await apiCall('PUT', endpoints.exams.publish(examId));\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.UPDATE_EXAM, payload: response.data.exam });\r\n        toast.success('Exam published successfully!');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to publish exam';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Set filters\r\n  const setFilters = (filters) => {\r\n    dispatch({ type: ActionTypes.SET_FILTERS, payload: filters });\r\n  };\r\n\r\n  // Set pagination\r\n  const setPagination = (pagination) => {\r\n    dispatch({ type: ActionTypes.SET_PAGINATION, payload: pagination });\r\n  };\r\n\r\n  // Clear error\r\n  const clearError = () => {\r\n    dispatch({ type: ActionTypes.CLEAR_ERROR });\r\n  };\r\n\r\n  // Reset state\r\n  const resetState = () => {\r\n    dispatch({ type: ActionTypes.RESET_STATE });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    fetchExams,\r\n    fetchExamById,\r\n    createExam,\r\n    updateExam,\r\n    deleteExam,\r\n    startExam,\r\n    submitAnswer,\r\n    submitExam,\r\n    fetchSubmissions,\r\n    publishExam,\r\n    setFilters,\r\n    setPagination,\r\n    clearError,\r\n    resetState\r\n  };\r\n\r\n  return (\r\n    <ExamContext.Provider value={value}>\r\n      {children}\r\n    </ExamContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use exam context\r\nexport const useExam = () => {\r\n  const context = useContext(ExamContext);\r\n  if (!context) {\r\n    throw new Error('useExam must be used within an ExamProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default ExamContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}