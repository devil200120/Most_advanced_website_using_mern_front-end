{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT0001\\\\Desktop\\\\exam_site\\\\front-end\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// File: c:\\Users\\KIIT0001\\Desktop\\exam_site\\frontend\\src\\context\\AuthContext.js\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport { apiCall, endpoints } from '../services/api';\nimport { toast } from 'react-toastify';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\n\n// Action types\nconst ActionTypes = {\n  AUTH_START: 'AUTH_START',\n  AUTH_SUCCESS: 'AUTH_SUCCESS',\n  AUTH_FAILURE: 'AUTH_FAILURE',\n  LOGOUT: 'LOGOUT',\n  UPDATE_USER: 'UPDATE_USER',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.AUTH_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case ActionTypes.AUTH_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case ActionTypes.AUTH_FAILURE:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case ActionTypes.LOGOUT:\n      return {\n        ...initialState,\n        isLoading: false\n      };\n    case ActionTypes.UPDATE_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Initialize auth on app load\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n  const initializeAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      if (token && user) {\n        // Verify token with backend\n        const response = await apiCall('GET', endpoints.auth.me);\n        if (response.success) {\n          dispatch({\n            type: ActionTypes.AUTH_SUCCESS,\n            payload: {\n              user: response.data.user,\n              token: token\n            }\n          });\n        } else {\n          // Invalid token, clear localStorage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: ActionTypes.LOGOUT\n          });\n        }\n      } else {\n        dispatch({\n          type: ActionTypes.LOGOUT\n        });\n      }\n    } catch (error) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      dispatch({\n        type: ActionTypes.LOGOUT\n      });\n    }\n  };\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: ActionTypes.AUTH_START\n      });\n      const response = await apiCall('POST', endpoints.auth.login, {\n        email,\n        password\n      });\n      if (response.success) {\n        const {\n          user,\n          accessToken\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', accessToken);\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch({\n          type: ActionTypes.AUTH_SUCCESS,\n          payload: {\n            user: user,\n            token: accessToken\n          }\n        });\n        toast.success('Login successful!');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      dispatch({\n        type: ActionTypes.AUTH_FAILURE,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      dispatch({\n        type: ActionTypes.AUTH_START\n      });\n      const response = await apiCall('POST', endpoints.auth.register, userData);\n      if (response.success) {\n        toast.success('Registration successful! Please check your email for verification.');\n        dispatch({\n          type: ActionTypes.CLEAR_ERROR\n        });\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      dispatch({\n        type: ActionTypes.AUTH_FAILURE,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: ActionTypes.LOGOUT\n    });\n    toast.success('Logged out successfully');\n  };\n\n  // Update user profile\n  const updateUser = userData => {\n    const updatedUser = {\n      ...state.user,\n      ...userData\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    dispatch({\n      type: ActionTypes.UPDATE_USER,\n      payload: userData\n    });\n    setUser(updatedUser);\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      const response = await apiCall('POST', endpoints.auth.forgotPassword, {\n        email\n      });\n      if (response.success) {\n        toast.success('Password reset email sent!');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to send reset email';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, password) => {\n    try {\n      const response = await apiCall('POST', endpoints.auth.resetPassword, {\n        token,\n        password\n      });\n      if (response.success) {\n        toast.success('Password reset successful!');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Password reset failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Verify email\n  const verifyEmail = async token => {\n    try {\n      const response = await apiCall('POST', endpoints.auth.verifyEmail, {\n        token\n      });\n      if (response.success) {\n        toast.success('Email verified successfully!');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Email verification failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      const response = await apiCall('POST', endpoints.auth.changePassword, {\n        currentPassword,\n        newPassword\n      });\n      if (response.success) {\n        toast.success('Password changed successfully!');\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const errorMessage = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Password change failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Check if user has specific role\n  const hasRole = roles => {\n    if (!state.user) return false;\n    if (Array.isArray(roles)) {\n      return roles.includes(state.user.role);\n    }\n    return state.user.role === roles;\n  };\n\n  // Clear errors\n  const clearError = () => {\n    dispatch({\n      type: ActionTypes.CLEAR_ERROR\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n    forgotPassword,\n    resetPassword,\n    verifyEmail,\n    changePassword,\n    hasRole,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"LmfN2eO02Eeh1jzeXa5QcRW/E1g=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","apiCall","endpoints","toast","jsxDEV","_jsxDEV","initialState","user","token","isAuthenticated","isLoading","error","ActionTypes","AUTH_START","AUTH_SUCCESS","AUTH_FAILURE","LOGOUT","UPDATE_USER","CLEAR_ERROR","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","setUser","loading","setLoading","setIsAuthenticated","initializeAuth","localStorage","getItem","response","auth","me","success","data","removeItem","login","email","password","accessToken","setItem","JSON","stringify","Error","message","_error$response","_error$response$data","errorMessage","register","userData","_error$response2","_error$response2$data","logout","updateUser","updatedUser","forgotPassword","_error$response3","_error$response3$data","resetPassword","_error$response4","_error$response4$data","verifyEmail","_error$response5","_error$response5$data","changePassword","currentPassword","newPassword","_error$response6","_error$response6$data","hasRole","roles","Array","isArray","includes","role","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/KIIT0001/Desktop/exam_site/front-end/src/context/AuthContext.js"],"sourcesContent":["// File: c:\\Users\\KIIT0001\\Desktop\\exam_site\\frontend\\src\\context\\AuthContext.js\r\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\r\nimport { apiCall, endpoints } from '../services/api';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  error: null\r\n};\r\n\r\n// Action types\r\nconst ActionTypes = {\r\n  AUTH_START: 'AUTH_START',\r\n  AUTH_SUCCESS: 'AUTH_SUCCESS',\r\n  AUTH_FAILURE: 'AUTH_FAILURE',\r\n  LOGOUT: 'LOGOUT',\r\n  UPDATE_USER: 'UPDATE_USER',\r\n  CLEAR_ERROR: 'CLEAR_ERROR'\r\n};\r\n\r\n// Reducer\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.AUTH_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: null\r\n      };\r\n    \r\n    case ActionTypes.AUTH_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null\r\n      };\r\n    \r\n    case ActionTypes.AUTH_FAILURE:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: action.payload\r\n      };\r\n    \r\n    case ActionTypes.LOGOUT:\r\n      return {\r\n        ...initialState,\r\n        isLoading: false\r\n      };\r\n    \r\n    case ActionTypes.UPDATE_USER:\r\n      return {\r\n        ...state,\r\n        user: { ...state.user, ...action.payload }\r\n      };\r\n    \r\n    case ActionTypes.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Initialize auth on app load\r\n  useEffect(() => {\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const initializeAuth = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const user = localStorage.getItem('user');\r\n\r\n      if (token && user) {\r\n        // Verify token with backend\r\n        const response = await apiCall('GET', endpoints.auth.me);\r\n        \r\n        if (response.success) {\r\n          dispatch({\r\n            type: ActionTypes.AUTH_SUCCESS,\r\n            payload: {\r\n              user: response.data.user,\r\n              token: token\r\n            }\r\n          });\r\n        } else {\r\n          // Invalid token, clear localStorage\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          dispatch({ type: ActionTypes.LOGOUT });\r\n        }\r\n      } else {\r\n        dispatch({ type: ActionTypes.LOGOUT });\r\n      }\r\n    } catch (error) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      dispatch({ type: ActionTypes.LOGOUT });\r\n    }\r\n  };\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.AUTH_START });\r\n\r\n      const response = await apiCall('POST', endpoints.auth.login, {\r\n        email,\r\n        password\r\n      });\r\n\r\n      if (response.success) {\r\n        const { user, accessToken } = response.data;\r\n        \r\n        // Store in localStorage\r\n        localStorage.setItem('token', accessToken);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n\r\n        dispatch({\r\n          type: ActionTypes.AUTH_SUCCESS,\r\n          payload: {\r\n            user: user,\r\n            token: accessToken\r\n          }\r\n        });\r\n\r\n        toast.success('Login successful!');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Login failed';\r\n      dispatch({\r\n        type: ActionTypes.AUTH_FAILURE,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.AUTH_START });\r\n\r\n      const response = await apiCall('POST', endpoints.auth.register, userData);\r\n\r\n      if (response.success) {\r\n        toast.success('Registration successful! Please check your email for verification.');\r\n        dispatch({ type: ActionTypes.CLEAR_ERROR });\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Registration failed';\r\n      dispatch({\r\n        type: ActionTypes.AUTH_FAILURE,\r\n        payload: errorMessage\r\n      });\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    dispatch({ type: ActionTypes.LOGOUT });\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  // Update user profile\r\n  const updateUser = (userData) => {\r\n    const updatedUser = { ...state.user, ...userData };\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    dispatch({\r\n      type: ActionTypes.UPDATE_USER,\r\n      payload: userData\r\n    });\r\n    setUser(updatedUser);\r\n  };\r\n\r\n  // Forgot password\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      const response = await apiCall('POST', endpoints.auth.forgotPassword, { email });\r\n      \r\n      if (response.success) {\r\n        toast.success('Password reset email sent!');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to send reset email';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (token, password) => {\r\n    try {\r\n      const response = await apiCall('POST', endpoints.auth.resetPassword, {\r\n        token,\r\n        password\r\n      });\r\n      \r\n      if (response.success) {\r\n        toast.success('Password reset successful!');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Password reset failed';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Verify email\r\n  const verifyEmail = async (token) => {\r\n    try {\r\n      const response = await apiCall('POST', endpoints.auth.verifyEmail, { token });\r\n      \r\n      if (response.success) {\r\n        toast.success('Email verified successfully!');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Email verification failed';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Change password\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      const response = await apiCall('POST', endpoints.auth.changePassword, {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      \r\n      if (response.success) {\r\n        toast.success('Password changed successfully!');\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Password change failed';\r\n      toast.error(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Check if user has specific role\r\n  const hasRole = (roles) => {\r\n    if (!state.user) return false;\r\n    if (Array.isArray(roles)) {\r\n      return roles.includes(state.user.role);\r\n    }\r\n    return state.user.role === roles;\r\n  };\r\n\r\n  // Clear errors\r\n  const clearError = () => {\r\n    dispatch({ type: ActionTypes.CLEAR_ERROR });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n    forgotPassword,\r\n    resetPassword,\r\n    verifyEmail,\r\n    changePassword,\r\n    hasRole,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}