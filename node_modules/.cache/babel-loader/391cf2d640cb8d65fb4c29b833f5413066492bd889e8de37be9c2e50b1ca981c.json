{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT0001\\\\Desktop\\\\exam_site\\\\front-end\\\\src\\\\context\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// File: c:\\Users\\KIIT0001\\Desktop\\exam_site\\frontend\\src\\context\\NotificationContext.js\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { apiCall, endpoints } from '../services/api';\nimport { useAuth } from './AuthContext';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  notifications: [],\n  unreadCount: 0,\n  isLoading: false,\n  error: null\n};\n\n// Action types\nconst ActionTypes = {\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  SET_NOTIFICATIONS: 'SET_NOTIFICATIONS',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  MARK_AS_READ: 'MARK_AS_READ',\n  MARK_ALL_AS_READ: 'MARK_ALL_AS_READ',\n  DELETE_NOTIFICATION: 'DELETE_NOTIFICATION',\n  SET_UNREAD_COUNT: 'SET_UNREAD_COUNT',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      };\n    case ActionTypes.SET_NOTIFICATIONS:\n      return {\n        ...state,\n        notifications: action.payload.notifications,\n        unreadCount: action.payload.unreadCount,\n        isLoading: false\n      };\n    case ActionTypes.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications],\n        unreadCount: state.unreadCount + 1\n      };\n    case ActionTypes.MARK_AS_READ:\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => notification._id === action.payload ? {\n          ...notification,\n          isRead: true,\n          readAt: new Date()\n        } : notification),\n        unreadCount: Math.max(0, state.unreadCount - 1)\n      };\n    case ActionTypes.MARK_ALL_AS_READ:\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => ({\n          ...notification,\n          isRead: true,\n          readAt: new Date()\n        })),\n        unreadCount: 0\n      };\n    case ActionTypes.DELETE_NOTIFICATION:\n      const deletedNotification = state.notifications.find(n => n._id === action.payload);\n      return {\n        ...state,\n        notifications: state.notifications.filter(notification => notification._id !== action.payload),\n        unreadCount: deletedNotification && !deletedNotification.isRead ? Math.max(0, state.unreadCount - 1) : state.unreadCount\n      };\n    case ActionTypes.SET_UNREAD_COUNT:\n      return {\n        ...state,\n        unreadCount: action.payload\n      };\n    case ActionTypes.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst NotificationContext = /*#__PURE__*/createContext();\n\n// Notification provider component\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n\n  // Fetch notifications when user is authenticated\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      fetchNotifications();\n    }\n  }, [isAuthenticated, user]);\n\n  // Fetch notifications\n  const fetchNotifications = async (params = {}) => {\n    try {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: true\n      });\n      const response = await apiCall('GET', endpoints.notifications.getAll, null, {\n        params\n      });\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.SET_NOTIFICATIONS,\n          payload: {\n            notifications: response.data.notifications,\n            unreadCount: response.data.unreadCount\n          }\n        });\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      dispatch({\n        type: ActionTypes.SET_ERROR,\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch notifications'\n      });\n    }\n  };\n\n  // Mark notification as read\n  const markAsRead = async notificationId => {\n    try {\n      const response = await apiCall('PUT', endpoints.notifications.markAsRead(notificationId));\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.MARK_AS_READ,\n          payload: notificationId\n        });\n      }\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n    }\n  };\n\n  // Mark all notifications as read\n  const markAllAsRead = async () => {\n    try {\n      const response = await apiCall('PUT', endpoints.notifications.markAllAsRead);\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.MARK_ALL_AS_READ\n        });\n      }\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n    }\n  };\n\n  // Delete notification\n  const deleteNotification = async notificationId => {\n    try {\n      const response = await apiCall('DELETE', endpoints.notifications.delete(notificationId));\n      if (response.success) {\n        dispatch({\n          type: ActionTypes.DELETE_NOTIFICATION,\n          payload: notificationId\n        });\n      }\n    } catch (error) {\n      console.error('Failed to delete notification:', error);\n    }\n  };\n\n  // Add new notification (for real-time updates)\n  const addNotification = notification => {\n    dispatch({\n      type: ActionTypes.ADD_NOTIFICATION,\n      payload: notification\n    });\n  };\n\n  // Clear error\n  const clearError = () => {\n    dispatch({\n      type: ActionTypes.CLEAR_ERROR\n    });\n  };\n  const value = {\n    ...state,\n    fetchNotifications,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    addNotification,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use notification context\n_s(NotificationProvider, \"Tt7lNRJoV+zOmy9doVIpK7Y74l8=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nexport const useNotification = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default NotificationContext;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","apiCall","endpoints","useAuth","jsxDEV","_jsxDEV","initialState","notifications","unreadCount","isLoading","error","ActionTypes","SET_LOADING","SET_ERROR","SET_NOTIFICATIONS","ADD_NOTIFICATION","MARK_AS_READ","MARK_ALL_AS_READ","DELETE_NOTIFICATION","SET_UNREAD_COUNT","CLEAR_ERROR","notificationReducer","state","action","type","payload","map","notification","_id","isRead","readAt","Date","Math","max","deletedNotification","find","n","filter","NotificationContext","NotificationProvider","children","_s","dispatch","user","isAuthenticated","fetchNotifications","params","response","getAll","success","data","_error$response","_error$response$data","message","markAsRead","notificationId","console","markAllAsRead","deleteNotification","delete","addNotification","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotification","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/KIIT0001/Desktop/exam_site/front-end/src/context/NotificationContext.js"],"sourcesContent":["// File: c:\\Users\\KIIT0001\\Desktop\\exam_site\\frontend\\src\\context\\NotificationContext.js\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { apiCall, endpoints } from '../services/api';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  isLoading: false,\r\n  error: null\r\n};\r\n\r\n// Action types\r\nconst ActionTypes = {\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_ERROR: 'SET_ERROR',\r\n  SET_NOTIFICATIONS: 'SET_NOTIFICATIONS',\r\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\r\n  MARK_AS_READ: 'MARK_AS_READ',\r\n  MARK_ALL_AS_READ: 'MARK_ALL_AS_READ',\r\n  DELETE_NOTIFICATION: 'DELETE_NOTIFICATION',\r\n  SET_UNREAD_COUNT: 'SET_UNREAD_COUNT',\r\n  CLEAR_ERROR: 'CLEAR_ERROR'\r\n};\r\n\r\n// Reducer\r\nconst notificationReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_LOADING:\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case ActionTypes.SET_ERROR:\r\n      return { ...state, error: action.payload, isLoading: false };\r\n    \r\n    case ActionTypes.SET_NOTIFICATIONS:\r\n      return { \r\n        ...state, \r\n        notifications: action.payload.notifications,\r\n        unreadCount: action.payload.unreadCount,\r\n        isLoading: false \r\n      };\r\n    \r\n    case ActionTypes.ADD_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: [action.payload, ...state.notifications],\r\n        unreadCount: state.unreadCount + 1\r\n      };\r\n    \r\n    case ActionTypes.MARK_AS_READ:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification =>\r\n          notification._id === action.payload\r\n            ? { ...notification, isRead: true, readAt: new Date() }\r\n            : notification\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1)\r\n      };\r\n    \r\n    case ActionTypes.MARK_ALL_AS_READ:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification => ({\r\n          ...notification,\r\n          isRead: true,\r\n          readAt: new Date()\r\n        })),\r\n        unreadCount: 0\r\n      };\r\n    \r\n    case ActionTypes.DELETE_NOTIFICATION:\r\n      const deletedNotification = state.notifications.find(n => n._id === action.payload);\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(notification => notification._id !== action.payload),\r\n        unreadCount: deletedNotification && !deletedNotification.isRead \r\n          ? Math.max(0, state.unreadCount - 1) \r\n          : state.unreadCount\r\n      };\r\n    \r\n    case ActionTypes.SET_UNREAD_COUNT:\r\n      return { ...state, unreadCount: action.payload };\r\n    \r\n    case ActionTypes.CLEAR_ERROR:\r\n      return { ...state, error: null };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst NotificationContext = createContext();\r\n\r\n// Notification provider component\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\r\n  const { user, isAuthenticated } = useAuth();\r\n\r\n  // Fetch notifications when user is authenticated\r\n  useEffect(() => {\r\n    if (isAuthenticated && user) {\r\n      fetchNotifications();\r\n    }\r\n  }, [isAuthenticated, user]);\r\n\r\n  // Fetch notifications\r\n  const fetchNotifications = async (params = {}) => {\r\n    try {\r\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\r\n\r\n      const response = await apiCall('GET', endpoints.notifications.getAll, null, { params });\r\n\r\n      if (response.success) {\r\n        dispatch({\r\n          type: ActionTypes.SET_NOTIFICATIONS,\r\n          payload: {\r\n            notifications: response.data.notifications,\r\n            unreadCount: response.data.unreadCount\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: ActionTypes.SET_ERROR,\r\n        payload: error.response?.data?.message || 'Failed to fetch notifications'\r\n      });\r\n    }\r\n  };\r\n\r\n  // Mark notification as read\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      const response = await apiCall('PUT', endpoints.notifications.markAsRead(notificationId));\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.MARK_AS_READ, payload: notificationId });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to mark notification as read:', error);\r\n    }\r\n  };\r\n\r\n  // Mark all notifications as read\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      const response = await apiCall('PUT', endpoints.notifications.markAllAsRead);\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.MARK_ALL_AS_READ });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to mark all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  // Delete notification\r\n  const deleteNotification = async (notificationId) => {\r\n    try {\r\n      const response = await apiCall('DELETE', endpoints.notifications.delete(notificationId));\r\n\r\n      if (response.success) {\r\n        dispatch({ type: ActionTypes.DELETE_NOTIFICATION, payload: notificationId });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete notification:', error);\r\n    }\r\n  };\r\n\r\n  // Add new notification (for real-time updates)\r\n  const addNotification = (notification) => {\r\n    dispatch({ type: ActionTypes.ADD_NOTIFICATION, payload: notification });\r\n  };\r\n\r\n  // Clear error\r\n  const clearError = () => {\r\n    dispatch({ type: ActionTypes.CLEAR_ERROR });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    fetchNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification,\r\n    addNotification,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use notification context\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default NotificationContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}