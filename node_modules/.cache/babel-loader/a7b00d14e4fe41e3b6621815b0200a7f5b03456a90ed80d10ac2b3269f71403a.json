{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT0001\\\\Desktop\\\\exam_site\\\\front-end\\\\src\\\\context\\\\SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../services/api';\nimport { useTranslation } from '../hooks/useTranslation';\nimport { useTheme } from '../hooks/useTheme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\nexport const useSettings = () => {\n  _s();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n_s(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    changeLanguage\n  } = useTranslation();\n  const {\n    changeTheme\n  } = useTheme();\n  const [settings, setSettings] = useState({\n    notifications: {\n      emailNotifications: true,\n      pushNotifications: true,\n      examReminders: true,\n      resultNotifications: true,\n      systemUpdates: false\n    },\n    privacy: {\n      profileVisibility: 'public',\n      showEmail: false,\n      showPhone: false,\n      allowMessages: true\n    },\n    preferences: {\n      language: 'en',\n      timezone: 'UTC',\n      theme: 'light',\n      dateFormat: 'MM/DD/YYYY',\n      timeFormat: '12h'\n    },\n    exam: {\n      autoSave: true,\n      confirmBeforeSubmit: true,\n      showTimer: true,\n      playSound: false,\n      enableKeyboardShortcuts: true\n    }\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    loadSettings();\n  }, []);\n  useEffect(() => {\n    // Apply settings when they change\n    applySettings();\n  }, [settings]);\n  const loadSettings = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/users/settings');\n      if (response.data.success) {\n        setSettings(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const applySettings = () => {\n    // Apply language\n    if (settings.preferences.language) {\n      changeLanguage(settings.preferences.language);\n    }\n\n    // Apply theme\n    if (settings.preferences.theme) {\n      changeTheme(settings.preferences.theme);\n    }\n\n    // Apply timezone\n    if (settings.preferences.timezone) {\n      localStorage.setItem('userTimezone', settings.preferences.timezone);\n    }\n\n    // Apply date format\n    if (settings.preferences.dateFormat) {\n      localStorage.setItem('userDateFormat', settings.preferences.dateFormat);\n    }\n\n    // Apply time format\n    if (settings.preferences.timeFormat) {\n      localStorage.setItem('userTimeFormat', settings.preferences.timeFormat);\n    }\n  };\n  const updateSetting = async (category, key, value) => {\n    try {\n      // Update local state immediately for better UX\n      setSettings(prev => ({\n        ...prev,\n        [category]: {\n          ...prev[category],\n          [key]: value\n        }\n      }));\n\n      // Update on server\n      const response = await api.put('/users/settings', {\n        category,\n        key,\n        value\n      });\n      if (response.data.success) {\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Failed to update setting');\n      }\n    } catch (error) {\n      console.error('Error updating setting:', error);\n      // Revert local state on error\n      loadSettings();\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const saveAllSettings = async () => {\n    try {\n      const response = await api.put('/users/settings/bulk', settings);\n      if (response.data.success) {\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Failed to save settings');\n      }\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const resetSettings = async () => {\n    try {\n      const response = await api.post('/users/settings/reset');\n      if (response.data.success) {\n        setSettings(response.data.data.settings);\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Failed to reset settings');\n      }\n    } catch (error) {\n      console.error('Error resetting settings:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const value = {\n    settings,\n    loading,\n    updateSetting,\n    saveAllSettings,\n    resetSettings,\n    loadSettings\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s2(SettingsProvider, \"ANV67fFy4f2nKFrN2P65vWApvNk=\", false, function () {\n  return [useTranslation, useTheme];\n});\n_c = SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","useTranslation","useTheme","jsxDEV","_jsxDEV","SettingsContext","useSettings","_s","context","Error","SettingsProvider","children","_s2","changeLanguage","changeTheme","settings","setSettings","notifications","emailNotifications","pushNotifications","examReminders","resultNotifications","systemUpdates","privacy","profileVisibility","showEmail","showPhone","allowMessages","preferences","language","timezone","theme","dateFormat","timeFormat","exam","autoSave","confirmBeforeSubmit","showTimer","playSound","enableKeyboardShortcuts","loading","setLoading","loadSettings","applySettings","response","get","data","success","error","console","localStorage","setItem","updateSetting","category","key","value","prev","put","saveAllSettings","resetSettings","post","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/KIIT0001/Desktop/exam_site/front-end/src/context/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\nimport { useTranslation } from '../hooks/useTranslation';\r\nimport { useTheme } from '../hooks/useTheme';\r\n\r\nconst SettingsContext = createContext();\r\n\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SettingsProvider = ({ children }) => {\r\n  const { changeLanguage } = useTranslation();\r\n  const { changeTheme } = useTheme();\r\n  \r\n  const [settings, setSettings] = useState({\r\n    notifications: {\r\n      emailNotifications: true,\r\n      pushNotifications: true,\r\n      examReminders: true,\r\n      resultNotifications: true,\r\n      systemUpdates: false\r\n    },\r\n    privacy: {\r\n      profileVisibility: 'public',\r\n      showEmail: false,\r\n      showPhone: false,\r\n      allowMessages: true\r\n    },\r\n    preferences: {\r\n      language: 'en',\r\n      timezone: 'UTC',\r\n      theme: 'light',\r\n      dateFormat: 'MM/DD/YYYY',\r\n      timeFormat: '12h'\r\n    },\r\n    exam: {\r\n      autoSave: true,\r\n      confirmBeforeSubmit: true,\r\n      showTimer: true,\r\n      playSound: false,\r\n      enableKeyboardShortcuts: true\r\n    }\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadSettings();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Apply settings when they change\r\n    applySettings();\r\n  }, [settings]);\r\n\r\n  const loadSettings = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/users/settings');\r\n      if (response.data.success) {\r\n        setSettings(response.data.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading settings:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const applySettings = () => {\r\n    // Apply language\r\n    if (settings.preferences.language) {\r\n      changeLanguage(settings.preferences.language);\r\n    }\r\n    \r\n    // Apply theme\r\n    if (settings.preferences.theme) {\r\n      changeTheme(settings.preferences.theme);\r\n    }\r\n    \r\n    // Apply timezone\r\n    if (settings.preferences.timezone) {\r\n      localStorage.setItem('userTimezone', settings.preferences.timezone);\r\n    }\r\n    \r\n    // Apply date format\r\n    if (settings.preferences.dateFormat) {\r\n      localStorage.setItem('userDateFormat', settings.preferences.dateFormat);\r\n    }\r\n    \r\n    // Apply time format\r\n    if (settings.preferences.timeFormat) {\r\n      localStorage.setItem('userTimeFormat', settings.preferences.timeFormat);\r\n    }\r\n  };\r\n\r\n  const updateSetting = async (category, key, value) => {\r\n    try {\r\n      // Update local state immediately for better UX\r\n      setSettings(prev => ({\r\n        ...prev,\r\n        [category]: {\r\n          ...prev[category],\r\n          [key]: value\r\n        }\r\n      }));\r\n\r\n      // Update on server\r\n      const response = await api.put('/users/settings', { category, key, value });\r\n      \r\n      if (response.data.success) {\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Failed to update setting');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating setting:', error);\r\n      // Revert local state on error\r\n      loadSettings();\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const saveAllSettings = async () => {\r\n    try {\r\n      const response = await api.put('/users/settings/bulk', settings);\r\n      if (response.data.success) {\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Failed to save settings');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const resetSettings = async () => {\r\n    try {\r\n      const response = await api.post('/users/settings/reset');\r\n      if (response.data.success) {\r\n        setSettings(response.data.data.settings);\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Failed to reset settings');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting settings:', error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    settings,\r\n    loading,\r\n    updateSetting,\r\n    saveAllSettings,\r\n    resetSettings,\r\n    loadSettings\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={value}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}